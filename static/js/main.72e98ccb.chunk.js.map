{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["process","NODE_TLS_REJECT_UNAUTHORIZED","history","Interfacer","props","state","loading","result","trigger","push","previousStep","message","searchInputTimeout","setTimeout","makeprediction","then","myresponse","triggerNextStep","text","textarr","this","setState","concat","tosend","axios","create","httpsAgent","https","Agent","rejectUnauthorized","strictSSL","post","response","data","catch","err","console","log","React","Component","defaultProps","steps","undefined","id","user","component","waitAction","asMessage","App","className","width","headerTitle","contentStyle","height","style","botDelay","userDelay","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"oXAQAA,mDAAYC,6BAA+B,IAE3C,IAAIC,EAAU,GAERC,E,YACJ,WAAYC,GAAQ,IAAD,8BACjB,4CAAMA,KACDC,MAAQ,CAACC,SAAS,EAAMC,OAAQ,kBAAC,UAAD,MAAaC,SAAS,GAC3DN,EAAQO,KAAKL,EAAMM,aAAaC,SAChC,EAAKC,mBAAqBC,YAAW,WAAO,EAAKC,iBAAiBC,MAChE,SAAAC,GACA,EAAKX,MAAME,OAASS,EACpBd,EAAQO,KAAKO,GACb,EAAKZ,MAAMa,uBAEZ,KAVgB,E,+EAaDC,GAChB,IAAIC,EAAU,CAACD,GACfE,KAAKC,UAAS,SAAChB,GACb,MAAO,CAACH,QAASG,EAAMH,QAAQoB,OAAOH,S,uCAKxC,IAAII,EAAS,CACX,QAAYrB,EACZ,OAAW,MACX,MAAU,EACV,MAAU,GACV,YAAgB,GASlB,OAPiBsB,IAAMC,OAAO,CAC5BC,WAAY,IAAIC,IAAMC,MAAM,CAC1BC,oBAAoB,EACpBC,WAAW,MAICC,KAzCR,oCAyCiBR,GACxBR,MAAK,SAASiB,GACb,OAAOA,EAASC,QAEjBC,OAAM,SAAAC,GAAG,OAAEC,QAAQC,IAAIF,Q,oCAGX,IAAD,OACZf,KAAKC,SAAS,CAAEb,SAAS,IAAQ,WAC/B,EAAKJ,MAAMa,uB,+BAIb,OAAOG,KAAKf,MAAME,W,GAjDG+B,IAAMC,WA2D/BpC,EAAWqC,aAAe,CACxBC,WAAOC,EACPzB,qBAAiByB,GAKnB,IAAID,EAAQ,CACV,CACEE,GAAI,IACJhC,QAAS,eACTH,QAAS,KAEX,CACEmC,GAAI,IACJhC,QAAS,gBACTH,QAAS,KAEX,CACEmC,GAAI,IACJC,MAAM,EACNpC,QAAS,KAEX,CACEmC,GAAI,IACJE,UAAW,kBAAC,EAAD,MACXrC,QAAS,IACTsC,YAAY,EACZC,WAAW,IAeAC,MAVf,WACE,OACE,yBAAKC,UAAU,OACb,6BACA,kBAAC,IAAD,CAASC,MAAM,OAAOT,MAAOA,EAAOU,YAAY,MAAMC,aAAc,CAAEC,OAAQ,QAAUC,MAAO,CAAED,OAAQ,QAAUE,SAAU,IAAKC,UAAW,QChG/HC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMrD,MAAK,SAAAsD,GACjCA,EAAaC,kB","file":"static/js/main.72e98ccb.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport axios from 'axios'\nimport https from 'https'\n\nconst URL = \"https://68.194.56.25:4240/predict\"\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nvar history = [];\n\nclass Interfacer extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {loading: true, result: <Loading />, trigger: false};\n    history.push(props.previousStep.message);\n    this.searchInputTimeout = setTimeout(() => {this.makeprediction().then(\n      myresponse => {\n      this.state.result = myresponse;\n      history.push(myresponse);\n      this.props.triggerNextStep();\n    });\n  }, 400);\n  }\n\n  addquerytohistory(text) {\n    var textarr = [text];\n    this.setState((state) => {\n      return {history: state.history.concat(textarr)} \n    });\n  }\n\n  makeprediction(){\n    var tosend = {\n      \"history\" : history,\n      \"device\" : \"cpu\",\n      \"top_p\" : 0.0,\n      \"top_k\" : 10,\n      \"temperature\" : 1\n    }\n    const instance = axios.create({\n      httpsAgent: new https.Agent({  \n        rejectUnauthorized: false,\n        strictSSL: false\n      })\n    });\n\n    return instance.post(URL,tosend)\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(err=>console.log(err))\n  }\n\n  triggetNext() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep();\n    });\n  }\n  render() {\n    return(this.state.result);\n  }\n  \n}\n\nInterfacer.propTypes = {\n  previousStep: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nInterfacer.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\n\n\nvar steps = [\n  {\n    id: '0',\n    message: 'Hello there!',\n    trigger: '1',\n  },\n  {\n    id: '1',\n    message: 'Say something',\n    trigger: '2',\n  },\n  {\n    id: '2',\n    user: true,\n    trigger: '3',\n  },\n  {\n    id: '3',\n    component: <Interfacer />,\n    trigger: '2',\n    waitAction: true,\n    asMessage: true\n  }\n\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n      <ChatBot width=\"100%\" steps={steps} headerTitle=\"PAL\" contentStyle={{ height: '86vh' }} style={{ height: '100%' }} botDelay={750} userDelay={50} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}