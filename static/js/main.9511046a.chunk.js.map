{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["process","NODE_TLS_REJECT_UNAUTHORIZED","myuuid","require","uuidv4","history","FeedbackButton","props","Button","variant","size","color","onClick","triggerNextStep","value","trigger","React","Component","Thanks","state","loading","result","searchInputTimeout","setTimeout","sendfeedback","then","myresponse","console","log","refresh","this","tosend","steps","axios","create","httpsAgent","https","Agent","rejectUnauthorized","strictSSL","post","response","data","catch","err","window","location","replace","Interfacer","push","previousStep","message","makeprediction","text","textarr","setState","concat","defaultProps","undefined","id","user","component","waitAction","asMessage","delay","feedback","App","className","width","headerTitle","contentStyle","height","style","botDelay","userDelay","Boolean","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.9511046a.chunk.js","sourcesContent":["import React from 'react';\nimport './App.css';\nimport PropTypes from 'prop-types';\nimport ChatBot, { Loading } from 'react-simple-chatbot';\nimport axios from 'axios'\nimport https from 'https'\nimport { Button } from '@material-ui/core';\n\n\nconst URL = \"https://greetez.com:4240/predict\"\nconst feedbackURL = \"https://greetez.com:4240/feedback\"\nconst myURL = \"https://pal-ai.github.io/chat\"\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\n\nconst uuidv4 = require('uuid/v4');\nconst myuuid = uuidv4();\n\nvar history = [];\n\nclass FeedbackButton extends React.Component {\n  constructor(props) {\n    super(props)\n  }\n  render() {\n    return (\n      <Button variant=\"contained\" size=\"small\" color=\"default\" onClick={() => { \n        this.props.triggerNextStep({value : 'yes', trigger: 'feedback-form'});\n      }}>Wrong Response</Button>\n    );\n  }\n}\n\nclass Thanks extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {loading: true, result: <Loading />, trigger: false};\n    this.state.result = '';\n    this.searchInputTimeout = setTimeout(() => {this.sendfeedback(props).then(\n      myresponse => {\n        console.log(myresponse);\n        this.refresh();\n      });\n  }, 400);\n  }\n  render() {\n    return (this.state.result);\n  }\n\n  sendfeedback(props) {\n    var tosend = {\n      \"history\" : history,\n      \"id\" : myuuid,\n      'feedback' :props.steps['user-feedback']['message']\n    }\n    const instance = axios.create({\n      httpsAgent: new https.Agent({  \n        rejectUnauthorized: false,\n        strictSSL: false\n      })\n    });\n\n    return instance.post(feedbackURL,tosend)\n    .then(function(response) {\n      console.log(response.data);\n      return response.data;\n    })\n    .catch(err=>console.log(err))\n  }\n  refresh() {\n    window.location.replace(myURL);\n  }\n}\n\n\n\nclass Interfacer extends React.Component{\n  constructor(props) {\n    super(props);\n    this.state = {loading: true, result: <Loading />, trigger: false};\n    history.push(props.previousStep.message);\n    this.searchInputTimeout = setTimeout(() => {this.makeprediction().then(\n      myresponse => {\n      this.state.result = myresponse;\n      history.push(myresponse);\n      this.props.triggerNextStep();\n    });\n  }, 400);\n  }\n\n  addquerytohistory(text) {\n    var textarr = [text];\n    this.setState((state) => {\n      return {history: state.history.concat(textarr)} \n    });\n  }\n\n  makeprediction(){\n    var tosend = {\n      \"history\" : history,\n      \"device\" : \"cpu\",\n      \"top_p\" : 0.0,\n      \"top_k\" : 10,\n      \"temperature\" : 1,\n      \"id\" : myuuid\n    }\n    const instance = axios.create({\n      httpsAgent: new https.Agent({  \n        rejectUnauthorized: false,\n        strictSSL: false\n      })\n    });\n\n    return instance.post(URL,tosend)\n    .then(function(response) {\n      return response.data;\n    })\n    .catch(err=>console.log(err))\n  }\n\n  triggetNext() {\n    this.setState({ trigger: true }, () => {\n      this.props.triggerNextStep();\n    });\n  }\n  render() {\n    return(this.state.result);\n  }\n  \n}\n\nInterfacer.propTypes = {\n  previousStep: PropTypes.object,\n  triggerNextStep: PropTypes.func,\n};\n\nInterfacer.defaultProps = {\n  steps: undefined,\n  triggerNextStep: undefined,\n};\n\nvar steps = [\n  {\n    id: 'start0',\n    message: 'Hello there!',\n    trigger: 'start1',\n  },\n  {\n    id: 'start1',\n    message: 'Say something',\n    trigger: 'user',\n  },\n  {\n    id: 'user',\n    user: true,\n    trigger: 'message-returner',\n  },\n  {\n    id: 'message-returner',\n    component: <Interfacer />,\n    trigger: 'feedback',\n    waitAction: true,\n    asMessage: true\n  },\n  {\n    id: 'feedback',\n    component: <FeedbackButton />,\n    asMessage: true,\n    trigger: 'user'\n  },\n  {\n    id: 'feedback-form',\n    message: 'What should have I said?',\n    trigger: 'user-feedback'\n  },\n  {\n    id: 'user-feedback',\n    user: true,\n    trigger: 'thanks-message'\n  },\n  {\n    id: 'thanks-message',\n    delay: 1500,\n    message: 'Thanks!',\n    trigger: 'thanks'\n  },\n  {\n    id: 'thanks',\n    component: <Thanks feedback/>,\n    asMessage: true,\n    delay: 100\n  }\n\n\n\n];\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <div>\n      <ChatBot width=\"100%\" steps={steps} headerTitle=\"PAL\" contentStyle={{ height: '86vh' }} style={{ height: '100%' }} botDelay={0} userDelay={50} />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nprocess.env.NODE_TLS_REJECT_UNAUTHORIZED = '0';\nReactDOM.render(<App />, document.getElementById('root'));\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}